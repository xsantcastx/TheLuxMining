rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Products - Public read, Admin write
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Categories - Public read, Admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Models - Public read, Admin write
    match /models/{modelId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Materials - Public read, Admin write
    match /materials/{materialId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Tags - Public read, Admin write
    match /tags/{tagId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Size Groups - Public read, Admin write
    match /sizes/{sizeId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Templates - Admin only (should not be public)
    match /templates/{templateId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Benefit Templates - Public read, Admin write
    match /benefitTemplates/{templateId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Gallery Categories - Public read, Admin write
    match /galleryCategories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Gallery Images - Public read, Admin write
    match /galleryImages/{imageId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Media - Public read, Admin write (for product covers and gallery images)
    match /media/{mediaId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Technical Data - Public read, Admin write
    match /technicalData/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Users - Users can read/write own data, Admins can read/update all
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false;
    }

    // Carts - Users can read/write their own cart, allow anonymous temp carts
    match /carts/{cartId} {
      // Allow user to access their own cart (cartId = uid)
      // Allow read even if cart doesn't exist yet (for initial load)
      allow read: if isSignedIn() && cartId == request.auth.uid;
      allow write: if isSignedIn() && cartId == request.auth.uid;
      
      // Allow anonymous cart creation and access (temp ID that upgrades on sign-in)
      allow read, write: if cartId.matches('^anon_[a-zA-Z0-9_]+$');
    }

    // Addresses - Users can read/write their own addresses
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if isOwner(userId);
      allow list: if isOwner(userId);
    }

    // Orders - Users can create and read own orders, Admins can read/update all
    match /orders/{orderId} {
      allow read: if isAdmin() || 
                    (isSignedIn() && resource.data.uid == request.auth.uid);
      // Allow order creation only if user is authenticated and uid matches
      allow create: if isSignedIn() && 
                      request.resource.data.uid == request.auth.uid;
      // Only admins can update orders (status changes, etc.)
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Payments - Read-only for users (their own), write access for backend/webhooks only
    match /payments/{paymentId} {
      allow read: if isAdmin() || 
                    (isSignedIn() && resource.data.uid == request.auth.uid);
      // Payments are created/updated by backend Cloud Functions only
      allow write: if false;
    }

    // Webhook Logs - Admin read-only (created by backend)
    match /webhooks_log/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }

    // Promo Codes - Public read (to validate), Admin write
    match /promoCodes/{codeId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Mail collection for contact form (Brevo integration)
    match /mail/{document} {
      allow create: if request.auth == null 
        && resource == null
        && request.resource.data.keys().hasAll(['to', 'message'])
        && request.resource.data.to is list
        && request.resource.data.to.size() <= 3
        && request.resource.data.message.keys().hasAll(['subject', 'html'])
        && request.resource.data.to[0] in ['support@theluxmining.com', 'contact@theluxmining.com', 'xsantcastx@xsantcastx.com'];
      
      allow read: if false;
      allow update, delete: if false;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
